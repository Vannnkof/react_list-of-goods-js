{"version":3,"sources":["App.jsx","index.jsx"],"names":["SORT_FIELD_ALPH","SORT_FIELD_LENGTH","goodsFromServer","App","useState","sortField","setSortField","reverseField","setReverseField","goods","visibleGoods","map","good","index","name","id","long","length","sort","good1","good2","localeCompare","reverse","getPreparedGoods","className","onClick","type","cn","ReactDOM","render","document","getElementById"],"mappings":"0OAMMA,EAAkB,sBAClBC,EAAoB,iBAEbC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAkCK,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAnCR,SAA0BA,EAA1B,GAA+D,IAA5BJ,EAA2B,EAA3BA,UAAWE,EAAgB,EAAhBA,aACtCG,EAAeD,EAAME,KAAI,SAACC,EAAMC,GAAP,MAC7B,CACEC,KAAMF,EACNG,GAAKF,EAAQ,EACbG,KAAMJ,EAAKK,WAuBf,OAnBIZ,GACFK,EAAaQ,MAAK,SAACC,EAAOC,GACxB,OAAQf,GACN,KAAKL,EACH,OAAOmB,EAAML,KAAKO,cAAcD,EAAMN,MAExC,KAAKb,EACH,OAAOkB,EAAMH,KAAOI,EAAMJ,KAE5B,QACE,MAAO,OAKXT,GACFG,EAAaY,UAGRZ,EAOOa,CACZrB,EACA,CAAEG,YAAWE,iBAGf,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMnB,EAAaN,IAC5B0B,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,WAAYtB,IAAcL,IAJ9B,iCAUA,wBACEyB,QAAS,kBAAMnB,EAAaL,IAC5ByB,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,WAAYtB,IAAcJ,IAJ9B,4BAUA,wBACEwB,QAAS,kBAAMjB,GAAiBD,IAChCmB,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAapB,IAJjB,sBAUEF,GAAaE,IACb,wBACEkB,QAAS,WACPjB,GAAgB,GAChBF,EAAa,KAEfoB,KAAK,SACLF,UAAU,4BANZ,sBAcJ,6BACGf,EAAME,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,EAAKE,MADgBF,EAAKG,aC7GvCa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e6100912.chunk.js","sourcesContent":["import cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nconst SORT_FIELD_ALPH = 'Sort alphabetically';\nconst SORT_FIELD_LENGTH = 'Sort by length';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(goods, { sortField, reverseField }) {\n  const visibleGoods = goods.map((good, index) => (\n    {\n      name: good,\n      id: (index + 1),\n      long: good.length,\n    }\n  ));\n\n  if (sortField) {\n    visibleGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPH:\n          return good1.name.localeCompare(good2.name);\n\n        case SORT_FIELD_LENGTH:\n          return good1.long - good2.long;\n\n        default:\n          return '';\n      }\n    });\n  }\n\n  if (reverseField) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState(false);\n\n  const goods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, reverseField },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_FIELD_ALPH)}\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SORT_FIELD_ALPH,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SORT_FIELD_LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReverseField(!reverseField)}\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !reverseField,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            onClick={() => {\n              setReverseField(false);\n              setSortField('');\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )\n        }\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good.id}>\n            {good.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}